// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blockStorage.proto

#include "blockStorage.pb.h"
#include "blockStorage.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace BlockStorage {

static const char* BlockStorageService_method_names[] = {
  "/BlockStorage.BlockStorageService/rpc_read",
  "/BlockStorage.BlockStorageService/rpc_write",
};

std::unique_ptr< BlockStorageService::Stub> BlockStorageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< BlockStorageService::Stub> stub(new BlockStorageService::Stub(channel, options));
  return stub;
}

BlockStorageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_rpc_read_(BlockStorageService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_rpc_write_(BlockStorageService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BlockStorageService::Stub::rpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::BlockStorage::ReadResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::BlockStorage::ReadRequest, ::BlockStorage::ReadResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_rpc_read_, context, request, response);
}

void BlockStorageService::Stub::async::rpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest* request, ::BlockStorage::ReadResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::BlockStorage::ReadRequest, ::BlockStorage::ReadResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_rpc_read_, context, request, response, std::move(f));
}

void BlockStorageService::Stub::async::rpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest* request, ::BlockStorage::ReadResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_rpc_read_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::BlockStorage::ReadResult>* BlockStorageService::Stub::PrepareAsyncrpc_readRaw(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::BlockStorage::ReadResult, ::BlockStorage::ReadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_rpc_read_, context, request);
}

::grpc::ClientAsyncResponseReader< ::BlockStorage::ReadResult>* BlockStorageService::Stub::Asyncrpc_readRaw(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrpc_readRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status BlockStorageService::Stub::rpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::BlockStorage::WriteResult* response) {
  return ::grpc::internal::BlockingUnaryCall< ::BlockStorage::WriteRequest, ::BlockStorage::WriteResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_rpc_write_, context, request, response);
}

void BlockStorageService::Stub::async::rpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest* request, ::BlockStorage::WriteResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::BlockStorage::WriteRequest, ::BlockStorage::WriteResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_rpc_write_, context, request, response, std::move(f));
}

void BlockStorageService::Stub::async::rpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest* request, ::BlockStorage::WriteResult* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_rpc_write_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::BlockStorage::WriteResult>* BlockStorageService::Stub::PrepareAsyncrpc_writeRaw(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::BlockStorage::WriteResult, ::BlockStorage::WriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_rpc_write_, context, request);
}

::grpc::ClientAsyncResponseReader< ::BlockStorage::WriteResult>* BlockStorageService::Stub::Asyncrpc_writeRaw(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrpc_writeRaw(context, request, cq);
  result->StartCall();
  return result;
}

BlockStorageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlockStorageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BlockStorageService::Service, ::BlockStorage::ReadRequest, ::BlockStorage::ReadResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BlockStorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BlockStorage::ReadRequest* req,
             ::BlockStorage::ReadResult* resp) {
               return service->rpc_read(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BlockStorageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BlockStorageService::Service, ::BlockStorage::WriteRequest, ::BlockStorage::WriteResult, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](BlockStorageService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::BlockStorage::WriteRequest* req,
             ::BlockStorage::WriteResult* resp) {
               return service->rpc_write(ctx, req, resp);
             }, this)));
}

BlockStorageService::Service::~Service() {
}

::grpc::Status BlockStorageService::Service::rpc_read(::grpc::ServerContext* context, const ::BlockStorage::ReadRequest* request, ::BlockStorage::ReadResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BlockStorageService::Service::rpc_write(::grpc::ServerContext* context, const ::BlockStorage::WriteRequest* request, ::BlockStorage::WriteResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace BlockStorage


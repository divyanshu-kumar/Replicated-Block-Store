// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: blockStorage.proto
#ifndef GRPC_blockStorage_2eproto__INCLUDED
#define GRPC_blockStorage_2eproto__INCLUDED

#include "blockStorage.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace BlockStorage {

class BlockStorageService final {
 public:
  static constexpr char const* service_full_name() {
    return "BlockStorage.BlockStorageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status rpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::BlockStorage::ReadResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::ReadResult>> Asyncrpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::ReadResult>>(Asyncrpc_readRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::ReadResult>> PrepareAsyncrpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::ReadResult>>(PrepareAsyncrpc_readRaw(context, request, cq));
    }
    virtual ::grpc::Status rpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::BlockStorage::WriteResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::WriteResult>> Asyncrpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::WriteResult>>(Asyncrpc_writeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::WriteResult>> PrepareAsyncrpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::WriteResult>>(PrepareAsyncrpc_writeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void rpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest* request, ::BlockStorage::ReadResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest* request, ::BlockStorage::ReadResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void rpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest* request, ::BlockStorage::WriteResult* response, std::function<void(::grpc::Status)>) = 0;
      virtual void rpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest* request, ::BlockStorage::WriteResult* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::ReadResult>* Asyncrpc_readRaw(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::ReadResult>* PrepareAsyncrpc_readRaw(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::WriteResult>* Asyncrpc_writeRaw(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::BlockStorage::WriteResult>* PrepareAsyncrpc_writeRaw(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status rpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::BlockStorage::ReadResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BlockStorage::ReadResult>> Asyncrpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BlockStorage::ReadResult>>(Asyncrpc_readRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BlockStorage::ReadResult>> PrepareAsyncrpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BlockStorage::ReadResult>>(PrepareAsyncrpc_readRaw(context, request, cq));
    }
    ::grpc::Status rpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::BlockStorage::WriteResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BlockStorage::WriteResult>> Asyncrpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BlockStorage::WriteResult>>(Asyncrpc_writeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BlockStorage::WriteResult>> PrepareAsyncrpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::BlockStorage::WriteResult>>(PrepareAsyncrpc_writeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void rpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest* request, ::BlockStorage::ReadResult* response, std::function<void(::grpc::Status)>) override;
      void rpc_read(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest* request, ::BlockStorage::ReadResult* response, ::grpc::ClientUnaryReactor* reactor) override;
      void rpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest* request, ::BlockStorage::WriteResult* response, std::function<void(::grpc::Status)>) override;
      void rpc_write(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest* request, ::BlockStorage::WriteResult* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::BlockStorage::ReadResult>* Asyncrpc_readRaw(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BlockStorage::ReadResult>* PrepareAsyncrpc_readRaw(::grpc::ClientContext* context, const ::BlockStorage::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BlockStorage::WriteResult>* Asyncrpc_writeRaw(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::BlockStorage::WriteResult>* PrepareAsyncrpc_writeRaw(::grpc::ClientContext* context, const ::BlockStorage::WriteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_rpc_read_;
    const ::grpc::internal::RpcMethod rpcmethod_rpc_write_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status rpc_read(::grpc::ServerContext* context, const ::BlockStorage::ReadRequest* request, ::BlockStorage::ReadResult* response);
    virtual ::grpc::Status rpc_write(::grpc::ServerContext* context, const ::BlockStorage::WriteRequest* request, ::BlockStorage::WriteResult* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_rpc_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rpc_read() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_rpc_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_read(::grpc::ServerContext* /*context*/, const ::BlockStorage::ReadRequest* /*request*/, ::BlockStorage::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_read(::grpc::ServerContext* context, ::BlockStorage::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::BlockStorage::ReadResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_rpc_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_rpc_write() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_rpc_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_write(::grpc::ServerContext* /*context*/, const ::BlockStorage::WriteRequest* /*request*/, ::BlockStorage::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_write(::grpc::ServerContext* context, ::BlockStorage::WriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::BlockStorage::WriteResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_rpc_read<WithAsyncMethod_rpc_write<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_rpc_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rpc_read() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::BlockStorage::ReadRequest, ::BlockStorage::ReadResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::BlockStorage::ReadRequest* request, ::BlockStorage::ReadResult* response) { return this->rpc_read(context, request, response); }));}
    void SetMessageAllocatorFor_rpc_read(
        ::grpc::MessageAllocator< ::BlockStorage::ReadRequest, ::BlockStorage::ReadResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::BlockStorage::ReadRequest, ::BlockStorage::ReadResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rpc_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_read(::grpc::ServerContext* /*context*/, const ::BlockStorage::ReadRequest* /*request*/, ::BlockStorage::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_read(
      ::grpc::CallbackServerContext* /*context*/, const ::BlockStorage::ReadRequest* /*request*/, ::BlockStorage::ReadResult* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_rpc_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_rpc_write() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::BlockStorage::WriteRequest, ::BlockStorage::WriteResult>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::BlockStorage::WriteRequest* request, ::BlockStorage::WriteResult* response) { return this->rpc_write(context, request, response); }));}
    void SetMessageAllocatorFor_rpc_write(
        ::grpc::MessageAllocator< ::BlockStorage::WriteRequest, ::BlockStorage::WriteResult>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::BlockStorage::WriteRequest, ::BlockStorage::WriteResult>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_rpc_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_write(::grpc::ServerContext* /*context*/, const ::BlockStorage::WriteRequest* /*request*/, ::BlockStorage::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_write(
      ::grpc::CallbackServerContext* /*context*/, const ::BlockStorage::WriteRequest* /*request*/, ::BlockStorage::WriteResult* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_rpc_read<WithCallbackMethod_rpc_write<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_rpc_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rpc_read() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_rpc_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_read(::grpc::ServerContext* /*context*/, const ::BlockStorage::ReadRequest* /*request*/, ::BlockStorage::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_rpc_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_rpc_write() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_rpc_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_write(::grpc::ServerContext* /*context*/, const ::BlockStorage::WriteRequest* /*request*/, ::BlockStorage::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_rpc_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rpc_read() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_rpc_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_read(::grpc::ServerContext* /*context*/, const ::BlockStorage::ReadRequest* /*request*/, ::BlockStorage::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_read(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_rpc_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_rpc_write() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_rpc_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_write(::grpc::ServerContext* /*context*/, const ::BlockStorage::WriteRequest* /*request*/, ::BlockStorage::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrpc_write(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rpc_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rpc_read() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rpc_read(context, request, response); }));
    }
    ~WithRawCallbackMethod_rpc_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_read(::grpc::ServerContext* /*context*/, const ::BlockStorage::ReadRequest* /*request*/, ::BlockStorage::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_read(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_rpc_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_rpc_write() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->rpc_write(context, request, response); }));
    }
    ~WithRawCallbackMethod_rpc_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status rpc_write(::grpc::ServerContext* /*context*/, const ::BlockStorage::WriteRequest* /*request*/, ::BlockStorage::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* rpc_write(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rpc_read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rpc_read() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::BlockStorage::ReadRequest, ::BlockStorage::ReadResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::BlockStorage::ReadRequest, ::BlockStorage::ReadResult>* streamer) {
                       return this->Streamedrpc_read(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rpc_read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rpc_read(::grpc::ServerContext* /*context*/, const ::BlockStorage::ReadRequest* /*request*/, ::BlockStorage::ReadResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrpc_read(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::BlockStorage::ReadRequest,::BlockStorage::ReadResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_rpc_write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_rpc_write() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::BlockStorage::WriteRequest, ::BlockStorage::WriteResult>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::BlockStorage::WriteRequest, ::BlockStorage::WriteResult>* streamer) {
                       return this->Streamedrpc_write(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_rpc_write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status rpc_write(::grpc::ServerContext* /*context*/, const ::BlockStorage::WriteRequest* /*request*/, ::BlockStorage::WriteResult* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedrpc_write(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::BlockStorage::WriteRequest,::BlockStorage::WriteResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_rpc_read<WithStreamedUnaryMethod_rpc_write<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_rpc_read<WithStreamedUnaryMethod_rpc_write<Service > > StreamedService;
};

}  // namespace BlockStorage


#endif  // GRPC_blockStorage_2eproto__INCLUDED
